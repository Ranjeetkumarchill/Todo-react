{"version":3,"sources":["components/todopothahi/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputname","setInputName","lists","localStorage","getItem","JSON","parse","getLocalName","names","setNames","isEditName","setIsEditName","toggleButton","setToggleButton","addName","map","curElem","id","name","myNewName","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onChange","e","target","onClick","index","names_todo_edited","find","editName","updatedNames","filter","deleteName","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAqIeA,EAvHF,WACT,MAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsBF,mBAZP,WACf,IAAMG,EAAMC,aAAaC,QAAQ,cACjC,OAAGF,EACQG,KAAKC,MAAMJ,GAGX,GAMoBK,IAA/B,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAgCV,mBAAS,IAAzC,mBAAMW,EAAN,KAAiBC,EAAjB,KACA,EAAoCZ,oBAAS,GAA7C,mBAAMa,EAAN,KAAmBC,EAAnB,KACMC,EAAQ,WACV,GAAId,EAIC,GAAGA,GAAaY,EACjBH,EAASD,EAAMO,KAAI,SAACC,GAChB,OAAGA,EAAQC,KAAKP,EAEL,2BAAIM,GAAX,IAAmBE,KAAKlB,IAErBgB,MAEXf,EAAa,IACxBU,EAAc,MACdE,GAAgB,OAEL,CACA,IAAMM,EAAU,CACZF,IAAG,IAAIG,MAAOC,UAAUC,WACxBJ,KAAKlB,GAETS,EAAS,GAAD,mBAAKD,GAAL,CAAWW,KACnBlB,EAAa,SArBbsB,MAAM,yBA6Dd,OAJAC,qBAAU,WAENrB,aAAasB,QAAQ,aAAapB,KAAKqB,UAAUlB,MACnD,CAACA,IAEC,mCAEG,qBAAKmB,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mCACI,qBAAKC,IAAI,oBAAoBC,IAAI,aACjC,4EAEJ,sBAAKF,UAAU,WAAf,UACI,uBAAOG,KAAK,OAAOC,YAAY,kBAAaJ,UAAU,eAAeK,MAAOhC,EAAWiC,SAAU,SAACC,GAAD,OAAKjC,EAAaiC,EAAEC,OAAOH,UAC3HpB,EACD,mBAAGe,UAAU,sBAAsBS,QAAStB,IAE5C,mBAAGa,UAAU,qBAAqBS,QAAStB,OAI7C,qBAAKa,UAAU,YAAf,SACKnB,EAAMO,KAAI,SAACC,GACR,OACI,sBAAKW,UAAU,WAAf,UACA,6BAAKX,EAAQE,OACb,sBAAKS,UAAU,WAAf,UACA,mBAAGA,UAAU,sBAAsBS,QAAS,kBA1D9D,SAACC,GACZ,IAAMC,EAAkB9B,EAAM+B,MAAK,SAACvB,GAChC,OAAOA,EAAQC,KAAKoB,KAExBpC,EAAaqC,EAAkBpB,MAClCP,EAAc0B,GACdxB,GAAgB,GAoDgE2B,CAASxB,EAAQC,OACjE,mBAAGU,UAAU,2BAA2BS,QAAS,kBA/CjE,SAACC,GAEd,IAAMI,EAAajC,EAAMkC,QAAO,SAAC1B,GAC7B,OAAOA,EAAQC,KAAOoB,KAE1B5B,EAASgC,GA2CmBE,CAAW3B,EAAQC,YALaD,EAAQC,SAmBrD,qBAAKU,UAAU,YAAf,SACI,wBAAQA,UAAU,eAAe,oBAAkB,aAAaS,QAnDnE,WACZ3B,EAAS,KAkDM,SAAoF,0DCjH5FmC,EARH,WACV,OACE,mCACA,cAAC,EAAD,OCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.845e0eff.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport \"./style.css\";\r\n\r\n//get the local storage data back\r\nconst getLocalName=()=>{\r\n    const lists=localStorage.getItem(\"mytodoname\");\r\n    if(lists){\r\n        return JSON.parse(lists);\r\n    }\r\n    else{\r\n        return [];\r\n    }\r\n}\r\n\r\nconst Todo = () => {\r\n    const [inputname,setInputName]=useState(\"\");\r\n    const[names,setNames]=useState(getLocalName());\r\n    const[isEditName,setIsEditName]=useState(\"\");\r\n    const[toggleButton,setToggleButton]=useState(false);\r\n    const addName=()=>{\r\n        if(!inputname){\r\n            alert(\"please fill the name\");\r\n\r\n        }\r\n        else if(inputname && toggleButton ){\r\n            setNames(names.map((curElem)=>{\r\n                if(curElem.id===isEditName)\r\n                {\r\n                    return {...curElem,name:inputname};\r\n                }\r\n                return curElem;\r\n            }));\r\n            setInputName([])\r\n setIsEditName(null);\r\n setToggleButton(false);\r\n        }\r\n        else{\r\n            const myNewName={\r\n                id:new Date().getTime().toString(),\r\n                name:inputname,\r\n            };\r\n            setNames([...names,myNewName]);\r\n            setInputName(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    //edit name....\r\nconst editName=(index)=>{\r\n    const names_todo_edited=names.find((curElem)=>{\r\n        return curElem.id===index;\r\n    });\r\n    setInputName(names_todo_edited.name)\r\n setIsEditName(index);\r\n setToggleButton(true);\r\n}\r\n\r\n\r\n//   how to delete\r\n\r\nconst deleteName=(index)=>\r\n{\r\n    const updatedNames=names.filter((curElem)=>{\r\n        return curElem.id !== index;\r\n    });\r\n    setNames(updatedNames);\r\n\r\n};\r\n\r\n\r\n    // remove all \r\n\r\n    const removeAll=()=>{\r\n        setNames([]);\r\n    }\r\n\r\n\r\n    // adding local storage\r\n    useEffect(()=>\r\n    {\r\n        localStorage.setItem(\"mytodoname\",JSON.stringify(names));\r\n    },[names]);\r\n    return (\r\n        <>\r\n        \r\n           <div className=\"main-div\">\r\n               <div className=\"child-div\">\r\n                   <figure>\r\n                       <img src=\"./images/todo.png\" alt=\"todologo\" />\r\n                       <figcaption>Add your name here 👈</figcaption>\r\n                   </figure>\r\n                   <div className=\"addItems\">\r\n                       <input type=\"text\" placeholder=\"✍ Add name\" className=\"form-control\" value={inputname} onChange={(e)=>setInputName(e.target.value)}/>\r\n                       {toggleButton ?(\r\n                       <i className=\"far fa-edit add-btn\" onClick={addName}></i>\r\n                       ):(\r\n                       <i className=\"fa fa-plus add-btn\" onClick={addName}></i>)}\r\n                       \r\n                   </div>\r\n                     {/* show our name */}\r\n                     <div className=\"showItems\">\r\n                         {names.map((curElem)=>{\r\n                             return(\r\n                                 <div className=\"eachItem\" key={curElem.id}>\r\n                                 <h3>{curElem.name}</h3>\r\n                                 <div className=\"todo-btn\">\r\n                                 <i className=\"far fa-edit add-btn\" onClick={()=>editName(curElem.id)}></i>\r\n                                 <i className=\"far fa-trash-alt add-btn\" onClick={()=>\r\n                                deleteName(curElem.id)} ></i>\r\n\r\n                                 </div>\r\n                         </div>\r\n                             )\r\n\r\n\r\n                         })}\r\n                         \r\n\r\n                     </div>\r\n\r\n\r\n                        {/* remove all button */}\r\n                   <div className=\"showItems\">\r\n                       <button className=\"btn effect04\" data-sm-link-text=\"Remove All\" onClick={removeAll}><span>CHECK LIST</span></button>\r\n\r\n                   </div>\r\n\r\n               </div>\r\n               </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\nimport Todo from './components/todopothahi/todo'\nconst App = () => {\n  return(\n    <>\n    <Todo/>\n    </>\n    );\n};\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}